{
  "address": "0xF25580910F9E52a86C87f742110B5f03edEcb23a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "AlreadyProcessed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "InvalidAddressLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIsNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongSigner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "to",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ReceiptVerifier.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "to",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ReceiptVerifier.Receipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "name": "Sent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "to",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "chainTo",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReceiptVerifier.Receipt",
          "name": "_receipt",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_chainTo",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_recipientAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ffe2c980b87b88aed8298025a873c97bce78337ea556c7e2c5852b09a1a0087",
  "receipt": {
    "to": null,
    "from": "0x7295d96ED2C37173F0C3B4dB28447FE38202F27a",
    "contractAddress": "0xF25580910F9E52a86C87f742110B5f03edEcb23a",
    "transactionIndex": 57,
    "gasUsed": "1767281",
    "logsBloom": "0x
    "blockHash": "0x7da88c1c113c1cb70fe1b8f141a04f6a59530520b8057cb55237ecf52d1ee560",
    "transactionHash": "0x8ffe2c980b87b88aed8298025a873c97bce78337ea556c7e2c5852b09a1a0087",
    "logs": [],
    "blockNumber": 8078921,
    "cumulativeGasUsed": "20108952",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x668417616f1502D13EA1f9528F83072A133e8E01",
    "0x7295d96ED2C37173F0C3B4dB28447FE38202F27a"
  ],
  "numDeployments": 2,
  "solcInputHash": "ce90132d8e899f121043e7f2f634a0ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"AlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"InvalidAddressLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIsNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSigner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ReceiptVerifier.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ReceiptVerifier.Receipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct ReceiptVerifier.Receipt\",\"name\":\"_receipt\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_chainTo\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_recipientAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport {OwnableImmutable} from \\\"./base/OwnableImmutable.sol\\\";\\nimport {Roles} from \\\"./base/Roles.sol\\\";\\nimport {ReceiptVerifier} from \\\"./base/ReceiptVerifier.sol\\\";\\nimport {Pool} from \\\"./base/Pool.sol\\\";\\n\\nerror InvalidAddressLength(uint);\\n\\ncontract Bridge is OwnableImmutable, Roles, ReceiptVerifier, Pool {\\n    using Counters for Counters.Counter;\\n\\n    event Sent(Receipt receipt);\\n    event Claimed(Receipt receipt);\\n\\n    Counters.Counter nonce;\\n\\n    constructor(address _signer, address _owner)\\n        Roles(_signer)\\n        OwnableImmutable(_owner)\\n    {}\\n\\n    function send(\\n        string calldata _tokenName,\\n        uint256 _chainTo,\\n        bytes calldata _recipientAddress,\\n        uint256 _amount\\n    ) external {\\n        _burn(_tokenName, msg.sender, _amount);\\n\\n        emit Sent(\\n            Receipt({\\n                from: msg.sender,\\n                to: _recipientAddress,\\n                tokenName: _tokenName,\\n                amount: _amount,\\n                chainFrom: block.chainid,\\n                chainTo: _chainTo,\\n                nonce: nonce.current()\\n            })\\n        );\\n\\n        nonce.increment();\\n    }\\n\\n    function claim(Receipt calldata _receipt, bytes calldata _signature)\\n        external\\n    {\\n        if (_receipt.to.length != 20) revert InvalidAddressLength(_receipt.to.length);\\n        \\n        _useReceipt(_receipt, _signature);\\n\\n        bytes memory unpacked = _receipt.to;\\n        address to;\\n        assembly {\\n            to := mload(add(unpacked, 20))\\n        }\\n\\n        _mint(_receipt.tokenName, to, _receipt.amount);\\n\\n        emit Claimed(_receipt);\\n    }\\n}\\n\",\"keccak256\":\"0xf90121dfedeb0c2f68f964cb5f18e8845243f5ce935e3b2ba3a4b8bf2c102d6f\",\"license\":\"MIT\"},\"contracts/base/OwnableImmutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nerror NotOwner();\\n\\nabstract contract OwnableImmutable {\\n    address private immutable __owner;\\n\\n    constructor(address _owner) {\\n        __owner = _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        checkOwner(msg.sender);\\n        _;\\n    }\\n\\n    function checkOwner(address _operator) internal view {\\n        if (_operator != owner()) revert NotOwner();\\n    }\\n\\n    function owner() public view returns (address) {\\n        return __owner;\\n    }\\n}\\n\",\"keccak256\":\"0xf8458df2ddd8c37528550ca34cfca06fb12cafdda23b3fcf5dabe64da8db5f00\",\"license\":\"MIT\"},\"contracts/base/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {OwnableImmutable} from \\\"./OwnableImmutable.sol\\\";\\nimport {IMintableBurnable} from \\\"contracts/interfaces/IMintableBurnable.sol\\\";\\n\\nerror TokenIsNotSupported();\\n\\nabstract contract Pool is OwnableImmutable {\\n    mapping(bytes32 => address) tokenNameHash2Address;\\n\\n    function setTokenAddress(string calldata _tokenName, address _address)\\n        external\\n        onlyOwner\\n    {\\n        tokenNameHash2Address[_name2hash(_tokenName)] = _address;\\n    }\\n\\n    function _mint(\\n        string memory _tokenName,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        bytes32 hash = _name2hash(_tokenName);\\n\\n        if (tokenNameHash2Address[hash] == address(0))\\n            revert TokenIsNotSupported();\\n\\n        IMintableBurnable(tokenNameHash2Address[hash]).mint(_to, _amount);\\n    }\\n\\n    function _burn(\\n        string memory _tokenName,\\n        address _from,\\n        uint256 _amount\\n    ) internal {\\n        bytes32 hash = _name2hash(_tokenName);\\n\\n        if (tokenNameHash2Address[hash] == address(0))\\n            revert TokenIsNotSupported();\\n\\n        IMintableBurnable(tokenNameHash2Address[hash]).burn(_from, _amount);\\n    }\\n\\n    function _name2hash(string memory _tokenName)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(bytes(_tokenName));\\n    }\\n}\\n\",\"keccak256\":\"0x6d649d672c0909c645cbefbabc69d680871318039c5952f48f54a6795f83785f\",\"license\":\"MIT\"},\"contracts/base/ReceiptVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Roles} from \\\"./Roles.sol\\\";\\n\\nerror AlreadyProcessed(bytes32);\\nerror WrongSigner();\\nerror WrongChain();\\n\\nabstract contract ReceiptVerifier is Roles {\\n    using ECDSA for bytes32;\\n\\n    struct Receipt {\\n        address from;\\n        bytes to;\\n        string tokenName;\\n        uint256 amount;\\n        uint256 chainFrom;\\n        uint256 chainTo;\\n        uint256 nonce;\\n    }\\n\\n    mapping(bytes32 => bool) public processed;\\n\\n    function _useReceipt(Receipt memory _receipt, bytes memory _signature)\\n        internal\\n    {\\n        verifyChainId(_receipt);\\n\\n        bytes32 hash = _buildHash(_receipt);\\n\\n        doubleSpendGuard(hash);\\n        recoverOwner(hash, _signature);\\n    }\\n\\n    function _buildHash(Receipt memory _receipt)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _receipt.from,\\n                    _receipt.to,\\n                    _receipt.tokenName,\\n                    _receipt.amount,\\n                    _receipt.chainFrom,\\n                    _receipt.chainTo,\\n                    _receipt.nonce\\n                )\\n            );\\n    }\\n\\n    function doubleSpendGuard(bytes32 _processIdentifier) internal {\\n        if (processed[_processIdentifier])\\n            revert AlreadyProcessed(_processIdentifier);\\n        processed[_processIdentifier] = true;\\n    }\\n\\n    function recoverOwner(bytes32 _hash, bytes memory _signature)\\n        internal\\n        view\\n    {\\n        address recovered = _hash.toEthSignedMessageHash().recover(_signature);\\n        if (recovered != signer) revert WrongSigner();\\n    }\\n\\n    function verifyChainId(Receipt memory _receipt) internal view {\\n        if (_receipt.chainTo != block.chainid) revert WrongChain();\\n    }\\n}\\n\",\"keccak256\":\"0x345a90db31465d45c7205be8bbf82caff9ef3e66c70ce40ea4a6b0b632a5672e\",\"license\":\"MIT\"},\"contracts/base/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {OwnableImmutable} from \\\"./OwnableImmutable.sol\\\";\\n\\nabstract contract Roles is OwnableImmutable {\\n    address public signer;\\n\\n    constructor(address _signer) {\\n        signer = _signer;\\n    }\\n\\n    function setSigner(address _signer) external onlyOwner {\\n        signer = _signer;\\n    }\\n}\\n\",\"keccak256\":\"0x6bc2e84123145365f39348118b0a2ac502571d16c40923dfdc0291fa81c87edb\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface IMintableBurnable {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x0f987a1a0d6570dabb80dc1981fdc1f44be54919f6b1704b05f7ab9a63c6b89d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200201a3803806200201a833981810160405281019062000037919062000121565b81818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000168565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e982620000bc565b9050919050565b620000fb81620000dc565b81146200010757600080fd5b50565b6000815190506200011b81620000f0565b92915050565b600080604083850312156200013b576200013a620000b7565b5b60006200014b858286016200010a565b92505060206200015e858286016200010a565b9150509250929050565b608051611e9662000184600039600061027e0152611e966000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d8578063c1f0808a146100f6578063edd321eb14610126578063edee9e0c146101425761007d565b806317456e5614610082578063238ac9331461009e5780636c19e783146100bc575b600080fd5b61009c60048036038101906100979190610ef3565b61015e565b005b6100a661020a565b6040516100b39190610f62565b60405180910390f35b6100d660048036038101906100d19190610f7d565b61022e565b005b6100e061027a565b6040516100ed9190610f62565b60405180910390f35b610110600480360381019061010b9190610fe0565b6102a2565b60405161011d9190611028565b60405180910390f35b610140600480360381019061013b91906110bd565b6102c2565b005b61015c6004803603810190610157919061116f565b61047f565b005b610167336105f0565b80600260006101b986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061065f565b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610237336105f0565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60016020528060005260406000206000915054906101000a900460ff1681565b60148380602001906102d49190611225565b905014610329578280602001906102eb9190611225565b90506040517f6d1eca280000000000000000000000000000000000000000000000000000000081526004016103209190611297565b60405180910390fd5b610380836103369061158a565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610670565b60008380602001906103929190611225565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000601482015190506104418580604001906103f3919061159d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082876060013561069e565b7f6c88d7b573e9b8f02176fc86464358e9cb1300f57f18c34bb7aeac0b7e93fba885604051610470919061187c565b60405180910390a15050505050565b6104ce86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505033836107ea565b7f65bc11ef1c20d67465d1537f773c0a4fb23dadd40f2ea1d994ff372ef30534c96040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018381526020014681526020018681526020016105c66003610936565b8152506040516105d691906119f3565b60405180910390a16105e86003610944565b505050505050565b6105f861027a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461065c576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600081805190602001209050919050565b6106798261095a565b60006106848361099a565b905061068f816109f2565b6106998183610a83565b505050565b60006106a98461065f565b9050600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610744576040517fc20350c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984846040518363ffffffff1660e01b81526004016107b2929190611a15565b600060405180830381600087803b1580156107cc57600080fd5b505af11580156107e0573d6000803e3d6000fd5b5050505050505050565b60006107f58461065f565b9050600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610890576040517fc20350c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac84846040518363ffffffff1660e01b81526004016108fe929190611a15565b600060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b5050505050505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b468160a0015114610997576040517f10dfc03300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000816000015182602001518360400151846060015185608001518660a001518760c001516040516020016109d59796959493929190611b1f565b604051602081830303815290604052805190602001209050919050565b6001600082815260200190815260200160002060009054906101000a900460ff1615610a5557806040517f1a20d3e6000000000000000000000000000000000000000000000000000000008152600401610a4c9190611ba7565b60405180910390fd5b600180600083815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000610aa082610a9285610b2c565b610b5c90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b27576040517fa7932e6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600081604051602001610b3f9190611c2f565b604051602081830303815290604052805190602001209050919050565b6000806000610b6b8585610b83565b91509150610b7881610bd4565b819250505092915050565b6000806041835103610bc45760008060006020860151925060408601519150606086015160001a9050610bb887828585610d3a565b94509450505050610bcd565b60006002915091505b9250929050565b60006004811115610be857610be7611c55565b5b816004811115610bfb57610bfa611c55565b5b0315610d375760016004811115610c1557610c14611c55565b5b816004811115610c2857610c27611c55565b5b03610c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5f90611ce1565b60405180910390fd5b60026004811115610c7c57610c7b611c55565b5b816004811115610c8f57610c8e611c55565b5b03610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc690611d4d565b60405180910390fd5b60036004811115610ce357610ce2611c55565b5b816004811115610cf657610cf5611c55565b5b03610d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2d90611ddf565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610d75576000600391509150610e13565b600060018787878760405160008152602001604052604051610d9a9493929190611e1b565b6020604051602081039080840390855afa158015610dbc573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e0a57600060019250925050610e13565b80600092509250505b94509492505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610e5557610e54610e30565b5b8235905067ffffffffffffffff811115610e7257610e71610e35565b5b602083019150836001820283011115610e8e57610e8d610e3a565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec082610e95565b9050919050565b610ed081610eb5565b8114610edb57600080fd5b50565b600081359050610eed81610ec7565b92915050565b600080600060408486031215610f0c57610f0b610e26565b5b600084013567ffffffffffffffff811115610f2a57610f29610e2b565b5b610f3686828701610e3f565b93509350506020610f4986828701610ede565b9150509250925092565b610f5c81610eb5565b82525050565b6000602082019050610f776000830184610f53565b92915050565b600060208284031215610f9357610f92610e26565b5b6000610fa184828501610ede565b91505092915050565b6000819050919050565b610fbd81610faa565b8114610fc857600080fd5b50565b600081359050610fda81610fb4565b92915050565b600060208284031215610ff657610ff5610e26565b5b600061100484828501610fcb565b91505092915050565b60008115159050919050565b6110228161100d565b82525050565b600060208201905061103d6000830184611019565b92915050565b600080fd5b600060e0828403121561105e5761105d611043565b5b81905092915050565b60008083601f84011261107d5761107c610e30565b5b8235905067ffffffffffffffff81111561109a57611099610e35565b5b6020830191508360018202830111156110b6576110b5610e3a565b5b9250929050565b6000806000604084860312156110d6576110d5610e26565b5b600084013567ffffffffffffffff8111156110f4576110f3610e2b565b5b61110086828701611048565b935050602084013567ffffffffffffffff81111561112157611120610e2b565b5b61112d86828701611067565b92509250509250925092565b6000819050919050565b61114c81611139565b811461115757600080fd5b50565b60008135905061116981611143565b92915050565b6000806000806000806080878903121561118c5761118b610e26565b5b600087013567ffffffffffffffff8111156111aa576111a9610e2b565b5b6111b689828a01610e3f565b965096505060206111c989828a0161115a565b945050604087013567ffffffffffffffff8111156111ea576111e9610e2b565b5b6111f689828a01611067565b9350935050606061120989828a0161115a565b9150509295509295509295565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261124257611241611216565b5b80840192508235915067ffffffffffffffff8211156112645761126361121b565b5b6020830192506001820236038313156112805761127f611220565b5b509250929050565b61129181611139565b82525050565b60006020820190506112ac6000830184611288565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611300826112b7565b810181811067ffffffffffffffff8211171561131f5761131e6112c8565b5b80604052505050565b6000611332610e1c565b905061133e82826112f7565b919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611368576113676112c8565b5b611371826112b7565b9050602081019050919050565b82818337600083830152505050565b60006113a061139b8461134d565b611328565b9050828152602081018484840111156113bc576113bb611348565b5b6113c784828561137e565b509392505050565b600082601f8301126113e4576113e3610e30565b5b81356113f484826020860161138d565b91505092915050565b600067ffffffffffffffff821115611418576114176112c8565b5b611421826112b7565b9050602081019050919050565b600061144161143c846113fd565b611328565b90508281526020810184848401111561145d5761145c611348565b5b61146884828561137e565b509392505050565b600082601f83011261148557611484610e30565b5b813561149584826020860161142e565b91505092915050565b600060e082840312156114b4576114b36112b2565b5b6114be60e0611328565b905060006114ce84828501610ede565b600083015250602082013567ffffffffffffffff8111156114f2576114f1611343565b5b6114fe848285016113cf565b602083015250604082013567ffffffffffffffff81111561152257611521611343565b5b61152e84828501611470565b60408301525060606115428482850161115a565b60608301525060806115568482850161115a565b60808301525060a061156a8482850161115a565b60a08301525060c061157e8482850161115a565b60c08301525092915050565b6000611596368361149e565b9050919050565b600080833560016020038436030381126115ba576115b9611216565b5b80840192508235915067ffffffffffffffff8211156115dc576115db61121b565b5b6020830192506001820236038313156115f8576115f7611220565b5b509250929050565b600061160f6020840184610ede565b905092915050565b61162081610eb5565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261165257611651611630565b5b83810192508235915060208301925067ffffffffffffffff82111561167a57611679611626565b5b6001820236038313156116905761168f61162b565b5b509250929050565b600082825260208201905092915050565b60006116b58385611698565b93506116c283858461137e565b6116cb836112b7565b840190509392505050565b600080833560016020038436030381126116f3576116f2611630565b5b83810192508235915060208301925067ffffffffffffffff82111561171b5761171a611626565b5b6001820236038313156117315761173061162b565b5b509250929050565b600082825260208201905092915050565b60006117568385611739565b935061176383858461137e565b61176c836112b7565b840190509392505050565b6000611786602084018461115a565b905092915050565b61179781611139565b82525050565b600060e083016117b06000840184611600565b6117bd6000860182611617565b506117cb6020840184611635565b85830360208701526117de8382846116a9565b925050506117ef60408401846116d6565b858303604087015261180283828461174a565b925050506118136060840184611777565b611820606086018261178e565b5061182e6080840184611777565b61183b608086018261178e565b5061184960a0840184611777565b61185660a086018261178e565b5061186460c0840184611777565b61187160c086018261178e565b508091505092915050565b60006020820190508181036000830152611896818461179d565b905092915050565b600081519050919050565b60005b838110156118c75780820151818401526020810190506118ac565b60008484015250505050565b60006118de8261189e565b6118e88185611698565b93506118f88185602086016118a9565b611901816112b7565b840191505092915050565b600081519050919050565b60006119228261190c565b61192c8185611739565b935061193c8185602086016118a9565b611945816112b7565b840191505092915050565b600060e0830160008301516119686000860182611617565b506020830151848203602086015261198082826118d3565b9150506040830151848203604086015261199a8282611917565b91505060608301516119af606086018261178e565b5060808301516119c2608086018261178e565b5060a08301516119d560a086018261178e565b5060c08301516119e860c086018261178e565b508091505092915050565b60006020820190508181036000830152611a0d8184611950565b905092915050565b6000604082019050611a2a6000830185610f53565b611a376020830184611288565b9392505050565b60008160601b9050919050565b6000611a5682611a3e565b9050919050565b6000611a6882611a4b565b9050919050565b611a80611a7b82610eb5565b611a5d565b82525050565b600081905092915050565b6000611a9c8261189e565b611aa68185611a86565b9350611ab68185602086016118a9565b80840191505092915050565b600081905092915050565b6000611ad88261190c565b611ae28185611ac2565b9350611af28185602086016118a9565b80840191505092915050565b6000819050919050565b611b19611b1482611139565b611afe565b82525050565b6000611b2b828a611a6f565b601482019150611b3b8289611a91565b9150611b478288611acd565b9150611b538287611b08565b602082019150611b638286611b08565b602082019150611b738285611b08565b602082019150611b838284611b08565b60208201915081905098975050505050505050565b611ba181610faa565b82525050565b6000602082019050611bbc6000830184611b98565b92915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000611bf8601c83611ac2565b9150611c0382611bc2565b601c82019050919050565b6000819050919050565b611c29611c2482610faa565b611c0e565b82525050565b6000611c3a82611beb565b9150611c468284611c18565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611ccb601883611c84565b9150611cd682611c95565b602082019050919050565b60006020820190508181036000830152611cfa81611cbe565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611d37601f83611c84565b9150611d4282611d01565b602082019050919050565b60006020820190508181036000830152611d6681611d2a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611dc9602283611c84565b9150611dd482611d6d565b604082019050919050565b60006020820190508181036000830152611df881611dbc565b9050919050565b600060ff82169050919050565b611e1581611dff565b82525050565b6000608082019050611e306000830187611b98565b611e3d6020830186611e0c565b611e4a6040830185611b98565b611e576060830184611b98565b9594505050505056fea2646970667358221220135e3a61bd4c263e713caf38f58415a0863213b7d1dd2fa27f6a2713d351d40464736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100d8578063c1f0808a146100f6578063edd321eb14610126578063edee9e0c146101425761007d565b806317456e5614610082578063238ac9331461009e5780636c19e783146100bc575b600080fd5b61009c60048036038101906100979190610ef3565b61015e565b005b6100a661020a565b6040516100b39190610f62565b60405180910390f35b6100d660048036038101906100d19190610f7d565b61022e565b005b6100e061027a565b6040516100ed9190610f62565b60405180910390f35b610110600480360381019061010b9190610fe0565b6102a2565b60405161011d9190611028565b60405180910390f35b610140600480360381019061013b91906110bd565b6102c2565b005b61015c6004803603810190610157919061116f565b61047f565b005b610167336105f0565b80600260006101b986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061065f565b815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610237336105f0565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60016020528060005260406000206000915054906101000a900460ff1681565b60148380602001906102d49190611225565b905014610329578280602001906102eb9190611225565b90506040517f6d1eca280000000000000000000000000000000000000000000000000000000081526004016103209190611297565b60405180910390fd5b610380836103369061158a565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610670565b60008380602001906103929190611225565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505090506000601482015190506104418580604001906103f3919061159d565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505082876060013561069e565b7f6c88d7b573e9b8f02176fc86464358e9cb1300f57f18c34bb7aeac0b7e93fba885604051610470919061187c565b60405180910390a15050505050565b6104ce86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505033836107ea565b7f65bc11ef1c20d67465d1537f773c0a4fb23dadd40f2ea1d994ff372ef30534c96040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018381526020014681526020018681526020016105c66003610936565b8152506040516105d691906119f3565b60405180910390a16105e86003610944565b505050505050565b6105f861027a565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461065c576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600081805190602001209050919050565b6106798261095a565b60006106848361099a565b905061068f816109f2565b6106998183610a83565b505050565b60006106a98461065f565b9050600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610744576040517fc20350c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984846040518363ffffffff1660e01b81526004016107b2929190611a15565b600060405180830381600087803b1580156107cc57600080fd5b505af11580156107e0573d6000803e3d6000fd5b5050505050505050565b60006107f58461065f565b9050600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610890576040517fc20350c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac84846040518363ffffffff1660e01b81526004016108fe929190611a15565b600060405180830381600087803b15801561091857600080fd5b505af115801561092c573d6000803e3d6000fd5b5050505050505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b468160a0015114610997576040517f10dfc03300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000816000015182602001518360400151846060015185608001518660a001518760c001516040516020016109d59796959493929190611b1f565b604051602081830303815290604052805190602001209050919050565b6001600082815260200190815260200160002060009054906101000a900460ff1615610a5557806040517f1a20d3e6000000000000000000000000000000000000000000000000000000008152600401610a4c9190611ba7565b60405180910390fd5b600180600083815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000610aa082610a9285610b2c565b610b5c90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b27576040517fa7932e6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600081604051602001610b3f9190611c2f565b604051602081830303815290604052805190602001209050919050565b6000806000610b6b8585610b83565b91509150610b7881610bd4565b819250505092915050565b6000806041835103610bc45760008060006020860151925060408601519150606086015160001a9050610bb887828585610d3a565b94509450505050610bcd565b60006002915091505b9250929050565b60006004811115610be857610be7611c55565b5b816004811115610bfb57610bfa611c55565b5b0315610d375760016004811115610c1557610c14611c55565b5b816004811115610c2857610c27611c55565b5b03610c68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5f90611ce1565b60405180910390fd5b60026004811115610c7c57610c7b611c55565b5b816004811115610c8f57610c8e611c55565b5b03610ccf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc690611d4d565b60405180910390fd5b60036004811115610ce357610ce2611c55565b5b816004811115610cf657610cf5611c55565b5b03610d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2d90611ddf565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610d75576000600391509150610e13565b600060018787878760405160008152602001604052604051610d9a9493929190611e1b565b6020604051602081039080840390855afa158015610dbc573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e0a57600060019250925050610e13565b80600092509250505b94509492505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610e5557610e54610e30565b5b8235905067ffffffffffffffff811115610e7257610e71610e35565b5b602083019150836001820283011115610e8e57610e8d610e3a565b5b9250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec082610e95565b9050919050565b610ed081610eb5565b8114610edb57600080fd5b50565b600081359050610eed81610ec7565b92915050565b600080600060408486031215610f0c57610f0b610e26565b5b600084013567ffffffffffffffff811115610f2a57610f29610e2b565b5b610f3686828701610e3f565b93509350506020610f4986828701610ede565b9150509250925092565b610f5c81610eb5565b82525050565b6000602082019050610f776000830184610f53565b92915050565b600060208284031215610f9357610f92610e26565b5b6000610fa184828501610ede565b91505092915050565b6000819050919050565b610fbd81610faa565b8114610fc857600080fd5b50565b600081359050610fda81610fb4565b92915050565b600060208284031215610ff657610ff5610e26565b5b600061100484828501610fcb565b91505092915050565b60008115159050919050565b6110228161100d565b82525050565b600060208201905061103d6000830184611019565b92915050565b600080fd5b600060e0828403121561105e5761105d611043565b5b81905092915050565b60008083601f84011261107d5761107c610e30565b5b8235905067ffffffffffffffff81111561109a57611099610e35565b5b6020830191508360018202830111156110b6576110b5610e3a565b5b9250929050565b6000806000604084860312156110d6576110d5610e26565b5b600084013567ffffffffffffffff8111156110f4576110f3610e2b565b5b61110086828701611048565b935050602084013567ffffffffffffffff81111561112157611120610e2b565b5b61112d86828701611067565b92509250509250925092565b6000819050919050565b61114c81611139565b811461115757600080fd5b50565b60008135905061116981611143565b92915050565b6000806000806000806080878903121561118c5761118b610e26565b5b600087013567ffffffffffffffff8111156111aa576111a9610e2b565b5b6111b689828a01610e3f565b965096505060206111c989828a0161115a565b945050604087013567ffffffffffffffff8111156111ea576111e9610e2b565b5b6111f689828a01611067565b9350935050606061120989828a0161115a565b9150509295509295509295565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261124257611241611216565b5b80840192508235915067ffffffffffffffff8211156112645761126361121b565b5b6020830192506001820236038313156112805761127f611220565b5b509250929050565b61129181611139565b82525050565b60006020820190506112ac6000830184611288565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611300826112b7565b810181811067ffffffffffffffff8211171561131f5761131e6112c8565b5b80604052505050565b6000611332610e1c565b905061133e82826112f7565b919050565b600080fd5b600080fd5b600067ffffffffffffffff821115611368576113676112c8565b5b611371826112b7565b9050602081019050919050565b82818337600083830152505050565b60006113a061139b8461134d565b611328565b9050828152602081018484840111156113bc576113bb611348565b5b6113c784828561137e565b509392505050565b600082601f8301126113e4576113e3610e30565b5b81356113f484826020860161138d565b91505092915050565b600067ffffffffffffffff821115611418576114176112c8565b5b611421826112b7565b9050602081019050919050565b600061144161143c846113fd565b611328565b90508281526020810184848401111561145d5761145c611348565b5b61146884828561137e565b509392505050565b600082601f83011261148557611484610e30565b5b813561149584826020860161142e565b91505092915050565b600060e082840312156114b4576114b36112b2565b5b6114be60e0611328565b905060006114ce84828501610ede565b600083015250602082013567ffffffffffffffff8111156114f2576114f1611343565b5b6114fe848285016113cf565b602083015250604082013567ffffffffffffffff81111561152257611521611343565b5b61152e84828501611470565b60408301525060606115428482850161115a565b60608301525060806115568482850161115a565b60808301525060a061156a8482850161115a565b60a08301525060c061157e8482850161115a565b60c08301525092915050565b6000611596368361149e565b9050919050565b600080833560016020038436030381126115ba576115b9611216565b5b80840192508235915067ffffffffffffffff8211156115dc576115db61121b565b5b6020830192506001820236038313156115f8576115f7611220565b5b509250929050565b600061160f6020840184610ede565b905092915050565b61162081610eb5565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261165257611651611630565b5b83810192508235915060208301925067ffffffffffffffff82111561167a57611679611626565b5b6001820236038313156116905761168f61162b565b5b509250929050565b600082825260208201905092915050565b60006116b58385611698565b93506116c283858461137e565b6116cb836112b7565b840190509392505050565b600080833560016020038436030381126116f3576116f2611630565b5b83810192508235915060208301925067ffffffffffffffff82111561171b5761171a611626565b5b6001820236038313156117315761173061162b565b5b509250929050565b600082825260208201905092915050565b60006117568385611739565b935061176383858461137e565b61176c836112b7565b840190509392505050565b6000611786602084018461115a565b905092915050565b61179781611139565b82525050565b600060e083016117b06000840184611600565b6117bd6000860182611617565b506117cb6020840184611635565b85830360208701526117de8382846116a9565b925050506117ef60408401846116d6565b858303604087015261180283828461174a565b925050506118136060840184611777565b611820606086018261178e565b5061182e6080840184611777565b61183b608086018261178e565b5061184960a0840184611777565b61185660a086018261178e565b5061186460c0840184611777565b61187160c086018261178e565b508091505092915050565b60006020820190508181036000830152611896818461179d565b905092915050565b600081519050919050565b60005b838110156118c75780820151818401526020810190506118ac565b60008484015250505050565b60006118de8261189e565b6118e88185611698565b93506118f88185602086016118a9565b611901816112b7565b840191505092915050565b600081519050919050565b60006119228261190c565b61192c8185611739565b935061193c8185602086016118a9565b611945816112b7565b840191505092915050565b600060e0830160008301516119686000860182611617565b506020830151848203602086015261198082826118d3565b9150506040830151848203604086015261199a8282611917565b91505060608301516119af606086018261178e565b5060808301516119c2608086018261178e565b5060a08301516119d560a086018261178e565b5060c08301516119e860c086018261178e565b508091505092915050565b60006020820190508181036000830152611a0d8184611950565b905092915050565b6000604082019050611a2a6000830185610f53565b611a376020830184611288565b9392505050565b60008160601b9050919050565b6000611a5682611a3e565b9050919050565b6000611a6882611a4b565b9050919050565b611a80611a7b82610eb5565b611a5d565b82525050565b600081905092915050565b6000611a9c8261189e565b611aa68185611a86565b9350611ab68185602086016118a9565b80840191505092915050565b600081905092915050565b6000611ad88261190c565b611ae28185611ac2565b9350611af28185602086016118a9565b80840191505092915050565b6000819050919050565b611b19611b1482611139565b611afe565b82525050565b6000611b2b828a611a6f565b601482019150611b3b8289611a91565b9150611b478288611acd565b9150611b538287611b08565b602082019150611b638286611b08565b602082019150611b738285611b08565b602082019150611b838284611b08565b60208201915081905098975050505050505050565b611ba181610faa565b82525050565b6000602082019050611bbc6000830184611b98565b92915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000611bf8601c83611ac2565b9150611c0382611bc2565b601c82019050919050565b6000819050919050565b611c29611c2482610faa565b611c0e565b82525050565b6000611c3a82611beb565b9150611c468284611c18565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600082825260208201905092915050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611ccb601883611c84565b9150611cd682611c95565b602082019050919050565b60006020820190508181036000830152611cfa81611cbe565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611d37601f83611c84565b9150611d4282611d01565b602082019050919050565b60006020820190508181036000830152611d6681611d2a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611dc9602283611c84565b9150611dd482611d6d565b604082019050919050565b60006020820190508181036000830152611df881611dbc565b9050919050565b600060ff82169050919050565b611e1581611dff565b82525050565b6000608082019050611e306000830187611b98565b611e3d6020830186611e0c565b611e4a6040830185611b98565b611e576060830184611b98565b9594505050505056fea2646970667358221220135e3a61bd4c263e713caf38f58415a0863213b7d1dd2fa27f6a2713d351d40464736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1953,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "signer",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1827,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "processed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1679,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "tokenNameHash2Address",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1515,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "nonce",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)5_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}